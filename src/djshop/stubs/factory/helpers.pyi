from collections.abc import Generator
from typing import Any, Callable, List, Type, TypeVar

from . import base as base, declarations as declarations


T = TypeVar("T", bound=Any)


def debug(logger: str = ..., stream: Any | None = ...) -> Generator[None, None, None]: ...

def make_factory(klass: Type[T], **kwargs: Any) -> Callable[..., Type[T]]: ...

def build(klass: Type[T], **kwargs: Any) -> T: ...

def build_batch(klass: Type[T], size: int, **kwargs: Any) -> List[T]: ...

def create(klass: Type[T], **kwargs: Any) -> T: ...

def create_batch(klass: Type[T], size: int, **kwargs: Any) -> List[T]: ...

def stub(klass: Type[T], **kwargs: Any) -> T: ...

def stub_batch(klass: Type[T], size: int, **kwargs: Any) -> List[T]: ...

def generate(klass: Type[T], strategy: Any, **kwargs: Any) -> T: ...

def generate_batch(klass: Type[T], strategy: Any, size: int, **kwargs: Any) -> list[T]: ...

def simple_generate(klass: Type[T], create: bool, **kwargs: Any) -> T: ...

def simple_generate_batch(klass: Type[T], create: bool, size: int, **kwargs: Any) -> list[T]: ...

def lazy_attribute(func: Callable[..., Any]) -> Any: ...

def iterator(func: Callable[..., Any]) -> Any: ...

def sequence(func: Callable[..., Any]) -> Any: ...

def lazy_attribute_sequence(func: Callable[..., Any]) -> Any: ...

def container_attribute(func: Callable[..., Any]) -> Any: ...

def post_generation(func: Callable[..., Any]) -> Any: ...
